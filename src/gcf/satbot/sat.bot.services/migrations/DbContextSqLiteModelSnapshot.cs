// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sat.bot.services;

#nullable disable

namespace sat.bot.services.migrations
{
    [DbContext(typeof(DbContextSqLite))]
    partial class DbContextSqLiteModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("modelo.repositorio.cfdi.CFDI", b =>
                {
                    b.Property<long>("rowid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Cancelado")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cancelado");

                    b.Property<bool>("Emitido")
                        .HasColumnType("INTEGER")
                        .HasColumnName("emitido");

                    b.Property<long>("FechaCFDI")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fechacfdi");

                    b.Property<string>("Folio")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("folio");

                    b.Property<string>("FormaPago")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("formapago");

                    b.Property<string>("LugarExpedicion")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("lugarexpedicion");

                    b.Property<string>("MetodoPago")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("metodopago");

                    b.Property<string>("Moneda")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("moneda");

                    b.Property<long>("RFCId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rfcid");

                    b.Property<string>("Serie")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("serie");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("NUMERIC")
                        .HasColumnName("subtotal");

                    b.Property<bool>("TieneAddenda")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tieneaddenda");

                    b.Property<bool>("TieneCPredial")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tienecpredial");

                    b.Property<bool>("TieneComplementos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tienecomplementos");

                    b.Property<bool>("TieneI3os")
                        .HasMaxLength(5)
                        .HasColumnType("INTEGER")
                        .HasColumnName("tienei3os");

                    b.Property<bool>("TieneIRetenidos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tieneiretenidos");

                    b.Property<bool>("TieneITrasladados")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tieneitrasladados");

                    b.Property<bool>("TieneInfoAduanera")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tieneinfoaduanera");

                    b.Property<bool>("TieneRelacionados")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tienerelacionados");

                    b.Property<string>("TipoDeComprobante")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("tipodecomprobante");

                    b.Property<decimal>("Total")
                        .HasColumnType("NUMERIC")
                        .HasColumnName("total");

                    b.Property<decimal>("TotalIRetenidos")
                        .HasColumnType("NUMERIC")
                        .HasColumnName("totaliretenidos");

                    b.Property<decimal>("TotalITrasladados")
                        .HasColumnType("NUMERIC")
                        .HasColumnName("totalitrasladados");

                    b.Property<string>("UUID")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("uuid");

                    b.Property<string>("Uso")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("uso");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("version");

                    b.Property<int>("iano")
                        .HasColumnType("INTEGER")
                        .HasColumnName("iano");

                    b.Property<int>("idia")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idia");

                    b.Property<int>("imes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("imes");

                    b.HasKey("rowid");

                    b.HasIndex("RFCId");

                    b.ToTable("cfdis", (string)null);
                });

            modelBuilder.Entity("modelo.repositorio.cfdi.RFC", b =>
                {
                    b.Property<long>("rowid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT")
                        .HasColumnName("nombre");

                    b.Property<string>("Rfc")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT")
                        .HasColumnName("rfc");

                    b.HasKey("rowid");

                    b.ToTable("rfc", (string)null);
                });

            modelBuilder.Entity("sat.bot.modelo.CfdiUi", b =>
                {
                    b.Property<string>("UUID")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("folioFiscal");

                    b.Property<string>("EfectoComprobante")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("efectocomprobante");

                    b.Property<string>("EstadoComprobante")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("estadocomprobante");

                    b.Property<string>("EstatusCancelacion")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("estatuscancelacion");

                    b.Property<DateTime>("FechaCertificacion")
                        .HasColumnType("TEXT")
                        .HasColumnName("fechacertificacion");

                    b.Property<DateTime>("FechaEmisión")
                        .HasColumnType("TEXT")
                        .HasColumnName("fechaemision");

                    b.Property<DateTime?>("FechaProcesoCancelacion")
                        .HasColumnType("TEXT")
                        .HasColumnName("fechaprocesocancelacion");

                    b.Property<string>("FolioSustitución")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("FolioSustitucion");

                    b.Property<string>("Motivo")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("motivo");

                    b.Property<string>("NombreEmisor")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("nombreemisor");

                    b.Property<string>("NombreReceptor")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("nombrereceptor");

                    b.Property<string>("PacCertifico")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT")
                        .HasColumnName("paccertifico");

                    b.Property<string>("RFCEmisor")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT")
                        .HasColumnName("rfcemisor");

                    b.Property<string>("RFCReceptor")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT")
                        .HasColumnName("rfcreceptor");

                    b.Property<string>("StatusProcesoCancelacion")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("statusprocesocancelacion");

                    b.Property<int>("Tipo")
                        .HasColumnType("NUMERIC")
                        .HasColumnName("tipo");

                    b.Property<decimal>("Total")
                        .HasColumnType("NUMERIC")
                        .HasColumnName("total");

                    b.Property<string>("UrlDescarga")
                        .HasColumnType("TEXT")
                        .HasColumnName("urldescarga");

                    b.HasKey("UUID");

                    b.ToTable("consulta@cfdisui", (string)null);
                });

            modelBuilder.Entity("modelo.repositorio.cfdi.CFDI", b =>
                {
                    b.HasOne("modelo.repositorio.cfdi.RFC", "RFC")
                        .WithMany("Cfdis")
                        .HasForeignKey("RFCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RFC");
                });

            modelBuilder.Entity("modelo.repositorio.cfdi.RFC", b =>
                {
                    b.Navigation("Cfdis");
                });
#pragma warning restore 612, 618
        }
    }
}
