// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using aplicaciones.services.dbContext;

#nullable disable

namespace aplicaciones.services.dbcontext.data.migrations
{
    [DbContext(typeof(DbContextAplicaciones))]
    [Migration("20240227161112_MigracionAplicaciones")]
    partial class MigracionAplicaciones
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("aplicaciones.model.Aplicacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Activa")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("aplicacion$aplicaciones", (string)null);
                });

            modelBuilder.Entity("aplicaciones.model.Consentimiento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AplicacionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IdiomaDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AplicacionId");

                    b.ToTable("aplicacion$consentimientos", (string)null);
                });

            modelBuilder.Entity("aplicaciones.model.Invitacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AplicacionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("RolId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AplicacionId");

                    b.ToTable("aplicacion$invitaciones", (string)null);
                });

            modelBuilder.Entity("aplicaciones.model.LogoAplicacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AplicacionId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("EsSVG")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EsUrl")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IdiomaDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LogoURLBase64")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AplicacionId");

                    b.ToTable("aplicacion$logosaplicaciones", (string)null);
                });

            modelBuilder.Entity("aplicaciones.model.PlantillaInvitacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AplicacionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Plantilla")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TipoContenido")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AplicacionId");

                    b.ToTable("aplicacion$plantillasaplicaciones", (string)null);
                });

            modelBuilder.Entity("aplicaciones.model.Consentimiento", b =>
                {
                    b.HasOne("aplicaciones.model.Aplicacion", "Aplicacion")
                        .WithMany("Consentimientos")
                        .HasForeignKey("AplicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplicacion");
                });

            modelBuilder.Entity("aplicaciones.model.Invitacion", b =>
                {
                    b.HasOne("aplicaciones.model.Aplicacion", "Aplicacion")
                        .WithMany("Invitaciones")
                        .HasForeignKey("AplicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplicacion");
                });

            modelBuilder.Entity("aplicaciones.model.LogoAplicacion", b =>
                {
                    b.HasOne("aplicaciones.model.Aplicacion", "Aplicacion")
                        .WithMany("Logotipos")
                        .HasForeignKey("AplicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplicacion");
                });

            modelBuilder.Entity("aplicaciones.model.PlantillaInvitacion", b =>
                {
                    b.HasOne("aplicaciones.model.Aplicacion", "Aplicacion")
                        .WithMany("Plantillas")
                        .HasForeignKey("AplicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplicacion");
                });

            modelBuilder.Entity("aplicaciones.model.Aplicacion", b =>
                {
                    b.Navigation("Consentimientos");

                    b.Navigation("Invitaciones");

                    b.Navigation("Logotipos");

                    b.Navigation("Plantillas");
                });
#pragma warning restore 612, 618
        }
    }
}
